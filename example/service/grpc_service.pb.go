// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/grpc_service.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	message "github.com/manhdaovan/myrpc/example/message"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/grpc_service.proto", fileDescriptor_7c03672b44a5550f) }

var fileDescriptor_7c03672b44a5550f = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x4f, 0x2f, 0x2a, 0x48, 0x8e, 0x87, 0x72, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0xd8, 0xa1, 0x5c, 0x29, 0xe9, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x7d, 0xb0,
	0x78, 0x3c, 0x94, 0x07, 0x51, 0x65, 0xe4, 0xca, 0xc5, 0xe9, 0x9a, 0x9c, 0x91, 0x1f, 0x00, 0xd6,
	0x62, 0x81, 0xcc, 0x11, 0xd1, 0x83, 0xa9, 0x84, 0x8b, 0x79, 0xe6, 0x49, 0x89, 0x62, 0x8a, 0xfa,
	0x97, 0x96, 0x38, 0xe9, 0x46, 0x69, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7,
	0xea, 0xe7, 0x26, 0xe6, 0x65, 0xa4, 0x24, 0xe6, 0x97, 0x25, 0xe6, 0xe9, 0xe7, 0x56, 0x16, 0x15,
	0x24, 0xeb, 0xa7, 0x56, 0x24, 0xe6, 0x16, 0xe4, 0xa4, 0xea, 0x43, 0x9d, 0x94, 0xc4, 0x06, 0xb6,
	0xdc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x65, 0x5e, 0x35, 0x5d, 0xc0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoProtoClient is the client API for EchoProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoProtoClient interface {
	EchoProto(ctx context.Context, in *message.EchoProtoIn, opts ...grpc.CallOption) (*message.EchoProtoOut, error)
}

type echoProtoClient struct {
	cc *grpc.ClientConn
}

func NewEchoProtoClient(cc *grpc.ClientConn) EchoProtoClient {
	return &echoProtoClient{cc}
}

func (c *echoProtoClient) EchoProto(ctx context.Context, in *message.EchoProtoIn, opts ...grpc.CallOption) (*message.EchoProtoOut, error) {
	out := new(message.EchoProtoOut)
	err := c.cc.Invoke(ctx, "/service.EchoProto/EchoProto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoProtoServer is the server API for EchoProto service.
type EchoProtoServer interface {
	EchoProto(context.Context, *message.EchoProtoIn) (*message.EchoProtoOut, error)
}

func RegisterEchoProtoServer(s *grpc.Server, srv EchoProtoServer) {
	s.RegisterService(&_EchoProto_serviceDesc, srv)
}

func _EchoProto_EchoProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.EchoProtoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoProtoServer).EchoProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EchoProto/EchoProto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoProtoServer).EchoProto(ctx, req.(*message.EchoProtoIn))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.EchoProto",
	HandlerType: (*EchoProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoProto",
			Handler:    _EchoProto_EchoProto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/grpc_service.proto",
}
